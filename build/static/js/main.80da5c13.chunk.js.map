{"version":3,"sources":["Video.js","App.js","serviceWorker.js","index.js"],"names":["Video","window","location","replace","this","props","id","className","src","image","alt","title","author","onClick","download","React","Component","App","state","videos","query","load","bind","axios","post","headers","then","res","setState","data","catch","err","console","error","response","type","onChange","evt","target","value","map","video","name","url","videoId","key","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAqBeA,G,qLAfPC,OAAOC,SAASC,QAAQ,mDAAqDC,KAAKC,MAAMC,M,+BAGjF,IAAD,OACN,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKJ,KAAKC,MAAMI,MAAOC,IAAKN,KAAKC,MAAMM,MAAOJ,UAAU,UAC7D,wBAAIA,UAAU,SAASH,KAAKC,MAAMM,OAClC,wBAAIJ,UAAU,UAAUH,KAAKC,MAAMO,QACnC,4BAAQC,QAAS,kBAAM,EAAKC,YAAYP,UAAU,YAAlD,iB,GAXIQ,IAAMC,YC6CXC,E,kDAzCX,WAAaZ,GAAQ,IAAD,8BAChB,cAAMA,IACDa,MAAQ,CACTC,OAAQ,GACRC,MAAO,IAEX,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBANI,E,mDASX,IAAD,OACJC,IAAMC,KAAK,cAAe,CACtBJ,MAAOhB,KAAKc,MAAME,OACnB,CACCK,QAAS,CACL,eAAgB,sBAGnBC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CACvBT,OAAQQ,EAAIE,KAAKV,YAEpBW,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAIG,e,+BAG7B,IAAD,OACN,OACI,yBAAK3B,UAAU,OACX,yBAAKA,UAAU,UACX,oCACA,yBAAKA,UAAU,OACX,2BAAO4B,KAAK,OAAOC,SAAU,SAAAC,GAAG,OAAI,EAAKT,SAAS,CAAER,MAAOiB,EAAIC,OAAOC,WACtE,4BAAQ1B,QAAS,kBAAM,EAAKQ,QAAQd,UAAU,QAA9C,YAGR,yBAAKA,UAAU,UACVH,KAAKc,MAAMC,OAAOqB,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAO9B,MAAO8B,EAAM9B,MAAOC,OAAQ6B,EAAM7B,OAAO8B,KAAMC,IAAKF,EAAME,IAAKlC,MAAOgC,EAAMhC,MAAOH,GAAImC,EAAMG,QAASC,IAAKJ,EAAMG,mB,GAnC1J7B,IAAMC,WCKJ8B,QACW,cAA7B7C,OAAOC,SAAS6C,UAEe,UAA7B9C,OAAOC,SAAS6C,UAEhB9C,OAAOC,SAAS6C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM0B,c","file":"static/js/main.80da5c13.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Video.css';\r\n\r\nclass Video extends React.Component {\r\n    download () {\r\n        window.location.replace('http://ytdl-download.herokuapp.com/api/download/' + this.props.id);\r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <div className=\"Video\">\r\n                <img src={this.props.image} alt={this.props.title} className=\"Image\"></img>\r\n                <h3 className=\"Title\">{this.props.title}</h3>\r\n                <h4 className=\"Author\">{this.props.author}</h4>\r\n                <button onClick={() => this.download()} className=\"Download\">Download</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Video;","import React from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nimport Video from './Video';\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            videos: [],\n            query: '',\n        };\n        this.load = this.load.bind(this);\n    }\n\n    load () {\n        axios.post('api/search/', {\n            query: this.state.query,\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => this.setState({\n                videos: res.data.videos,\n            }))\n            .catch(err => console.error(err.response));\n    }\n\n    render () {\n        return (\n            <div className=\"App\">\n                <div className=\"Search\">\n                    <h1>YTDL</h1>\n                    <div className=\"Bar\">\n                        <input type=\"text\" onChange={evt => this.setState({ query: evt.target.value })}></input>\n                        <button onClick={() => this.load()} className=\"Load\">Search</button>\n                    </div>\n                </div>\n                <div className=\"Videos\">\n                    {this.state.videos.map(video => <Video title={video.title} author={video.author.name} url={video.url} image={video.image} id={video.videoId} key={video.videoId} />)}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}